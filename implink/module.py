import argparse
from shutil import move, rmtree
from pathlib import Path
from json import load, dump


def move_path(source: Path, destination: Path, force: bool):
    if destination.exists():
        if not force:
            print(f"Destination '{destination}' already exists.")
            return 1
        rmtree(destination)
    print(f"Moving {source} to {destination}...")
    move(source, destination)
    return 0


def delete_symlink(destination: Path):
    try: 
        rmtree(destination)
    except OSError:
        # Symlink is a file on Linux?
        destination.unlink()


def make_symlink(source: Path, destination: Path, force: bool):
    if not source.exists():
        print(f"Source '{source}' does not exist.")
        return -1
    if destination.exists():
        if not force:
            print(f"Destination '{destination}' already exists.")
            return -2
        delete_symlink(destination)
    source = source.resolve()
    print(f"Symlinking {source} to {destination}...")
    try:
        destination.symlink_to(source)
    except FileExistsError:
        print(f"Destination '{destination}' already exists.")
        return -3
    return 0


def generate_mapping(source: Path, destination: Path):
    cwd = Path.cwd()
    mapping_file = cwd / "implink-mapping.json"
    if mapping_file.is_file():
        mapping = load(mapping_file.open())
    else:
        mapping = {}
    mapping[str(source.resolve())] = str(destination.resolve())
    with mapping_file.open("w") as f:
        dump(mapping, f)
    return 0


def restore_mapping(mapping_file: Path, force: bool):
    print("Restoring mapping...")
    if not mapping_file.is_file():
        print(f"Mapping file '{mapping_file}' does not exist.")
        return -4
    with mapping_file.open() as f:
        mapping = load(f)
    for source, destination in mapping.items():
        print(f"Restoring {source} to {destination}...")
        source = Path(source)
        destination = Path(destination)
        make_symlink(source, destination, force=force)
    return 0


def main():
    parser = argparse.ArgumentParser(
        prog="implink",
        description="File symlinking made easy.",
        epilog="https://github.com/teppyboy/implink",
    )
    parser.add_argument('source', metavar='SRC', type=str, nargs='?', default=None,
                        help='Source file or directory to symlink')
    parser.add_argument('destination', metavar='DST', type=str, nargs='?', default=None,
                        help='The destination directory to symlink to')
    parser.add_argument(
        "--move",
        "-m",
        help="Move files then symlink the moved file to the original location.",
        action="store_true",
        default=False
    )
    parser.add_argument(
        "--force",
        "-f",
        help="Force overriding destination if exists.",
        action="store_true",
        default=False
    )
    parser.add_argument(
        "--generate-mapping",
        "-g",
        help="Generate mapping file for use with implink --restore-mapping",
        action="store_true",
        default=False
    )
    parser.add_argument(
        "--restore-mapping",
        "-r",
        metavar='MAPPING_FILE',
        help="Restore mapping from file generated by implink --generate-mapping",
        action="store"
    )
    args = parser.parse_args()
    if args.restore_mapping:
        restore_mapping(Path(args.restore_mapping), args.force)
        exit(0)
    if args.source is None or args.destination is None:
        print("Source and destination must be specified if not using restore-mapping")
        exit(1)
    source = Path(args.source)
    destination = Path(args.destination)
    print(f"Source: {source}")
    print(f"Destination: {destination}")
    if not source.exists():
        print(f"Source '{source}' does not exist.")
        exit(1)
    if args.move:
        if move_path(source, destination, force=args.force) != 0:
            exit(1)
        _tmp = source
        source = destination
        destination = _tmp
    make_symlink(source, destination, force=args.force)
    if args.generate_mapping:
        generate_mapping(source, destination)

